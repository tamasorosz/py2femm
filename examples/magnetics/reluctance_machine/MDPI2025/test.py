# import random
#
# import matplotlib.pyplot as plt
# import numpy as np
# import pandas as pd
# from sklearn.preprocessing import MinMaxScaler
#
# df = pd.read_csv('C:/Users/sevir/PycharmProjects/py2femm/examples/magnetics/reluctance_machine/MDPI2025/refined/case1_all.csv')
#
# del df['ANG']
#
# # print(df.min())
# # print()
# # print(df.max())
# #
# # print(df)
#
# # scaler = MinMaxScaler()
# # scaled_array = scaler.fit_transform(df)
# # X = pd.DataFrame(scaled_array, columns=df.columns[:])
# #
# # print(X)
#
# # print((19.17 - 15) / 10)
# #
# print(((0.417 + 0.05) * (25-15) + 15) - (0.417 * (25-15) + 15))
# print(((0.417 + 0.05) * (140-75.2) + 75.2) - (0.417 * (140-75.2) + 75.2))
# print(((0.417 + 0.05) * (3.75-0.5) + 0.5) - (0.417 * (3.75-0.5) + 0.5))
# print(((0.417 + 0.05) * (1-0) + 0) - (0.417 * (1-0) + 0))
# print(((0.417 + 0.05) * (4.15-0.5) + 0.5) - (0.417 * (4.15-0.5) + 0.5))
# print(((0.417 + 0.05) * (2.82-2.01) + 2.01) - (0.417 * (2.82-2.01) + 2.01))
# print(((0.417 + 0.05) * (1.99-1.51) + 1.51) - (0.417 * (1.99-1.51) + 1.51))
# print(((0.417 + 0.05) * (15-10) + 10) - (0.417 * (15-10) + 10))
# print(((0.417 + 0.05) * (18-11.05) + 11.05) - (0.417 * (18-11.05) + 11.05))
# print(((0.417 + 0.05) * (7.81-0) + 7.81) - (0.417 * (7.81-0) + 7.81))
# print(((0.417 + 0.05) * (4.9-0) + 4.9) - (0.417 * (4.9-0) + 4.9))
#
#
# # Initialize empty lists
# a, b, c, d, e, f, g, h, Y, X = [], [], [], [], [], [], [], [], [], []
#
# for i in range(1, 10000):
#     a_val = random.uniform(0, 0.05)
#     b_val = random.uniform(0, 0.05)
#     c_val = random.uniform(0, 0.05)
#     d_val = random.uniform(0, 0.05)
#     e_val = random.uniform(0, 0.05)
#     f_val = random.uniform(0, 0.05)
#     g_val = random.uniform(0, 0.05)
#     h_val = random.uniform(0, 0.05)
#
#     # Append values
#     a.append(a_val)
#     b.append(b_val)
#     c.append(c_val)
#     d.append(d_val)
#     e.append(e_val)
#     f.append(f_val)
#     g.append(g_val)
#     h.append(h_val)
#
#     # Calculate Euclidean norm for this row
#     norm = np.sqrt(a_val**2 + b_val**2 + c_val**2 + d_val**2 + e_val**2 + f_val**2 + g_val**2 + h_val**2)
#     Y.append(norm)
#
#     # Append index
#     X.append(i)
#
# # Create DataFrame
# df = pd.DataFrame({
#     'a': a,
#     'b': b,
#     'c': c,
#     'd': d,
#     'e': e,
#     'f': f,
#     'g': g,
#     'h': h,
#     'Y': Y
# })
#
# filtered_df = df[(df['Y'] < 0.05) & (df['Y'] > 0.049)]
# print(np.round(list(filtered_df.iloc[0]), 3))
# print(sum(np.round(list(filtered_df.iloc[0]), 3)))
#
# plt.scatter(X,Y)
# plt.axhline(y=0.05, color='red', linestyle='--', linewidth=2)
# plt.plot()
# plt.show()
#
# print(filtered_df.iloc[0,-1])
# print(((0.417 + filtered_df.iloc[0,0]) * (25-15) + 15) - (0.417 * (25-15) + 15))
# print(((0.417 + filtered_df.iloc[0,1]) * (140-75.2) + 75.2) - (0.417 * (140-75.2) + 75.2))
# print(((0.417 + filtered_df.iloc[0,2]) * (3.75-0.5) + 0.5) - (0.417 * (3.75-0.5) + 0.5))
# print(((0.417 + filtered_df.iloc[0,3]) * (1-0) + 0) - (0.417 * (1-0) + 0))
# print(((0.417 + filtered_df.iloc[0,4]) * (4.15-0.5) + 0.5) - (0.417 * (4.15-0.5) + 0.5))
# print(((0.417 + filtered_df.iloc[0,5]) * (2.82-2.01) + 2.01) - (0.417 * (2.82-2.01) + 2.01))
# print(((0.417 + filtered_df.iloc[0,6]) * (1.99-1.51) + 1.51) - (0.417 * (1.99-1.51) + 1.51))
# print(((0.417 + filtered_df.iloc[0,7]) * (15-10) + 10) - (0.417 * (15-10) + 10))
#
# # from scipy.spatial.distance import pdist, squareform
# #
# # # Assuming df is numeric
# # distance_matrix = squareform(pdist(df, metric='euclidean'))
# # distance_df = pd.DataFrame(distance_matrix, index=df.index, columns=df.index)
# # print(distance_df)
# #
# # nonzero_df = distance_df.replace(0, np.nan)
# #
# # print(nonzero_df.min().min())
# #
# # positions = np.where(nonzero_df < 1)
# # result = list(zip(nonzero_df.index[positions[0]], nonzero_df.columns[positions[1]]))
# #
# # print(result)
# # print(df.loc[3831])
# # print(df.loc[13569])
# #
# import matplotlib.pyplot as plt
#
# a = [-0.09804649946772491, 3.032740835462734, 5.815522215716384, 8.010554048828276, 9.432763745912668, 10.066491096702611, 10.0059443423158, 9.417213575477067, 8.559536825246088, 7.5940339771797, 6.640479979710132, 5.766860685982588, 4.988201884226176, 4.299725199438104, 3.6805900799798605, 3.127347140439207, 2.642102410226273, 2.221362994722697, 1.8791796326681964, 1.617868885485524, 1.4107052628376764, 1.2190655061031257, 1.0344852271590517, 0.850067068542694, 0.6712593471800472, 0.5088989100246276, 0.37023074610963025, 0.2625600640476115, 0.18261839102282457, 0.11765967089379176, 0.04234735635075864, -0.053670906078515, -0.1643922146033102, -0.29901068641540013, -0.4369697024777728, -0.5485600152887308, -0.6427241289086876, -0.7520194310682572, -0.8981155523357284, -1.0887578288572686, -1.3351961203134823, -1.6289243043322628, -1.943644841791772, -2.276378088979549, -2.6523420042021555, -3.0910698026399284, -3.6144626104511453, -4.238694806383428, -4.9640206397153035, -5.79016360057132, -6.709586814254465, -7.679554878798828, -8.635415783415457, -9.500976191521612, -10.081623274801528, -10.164636750536408, -9.574312164871944, -8.157640430251716, -5.967090785813248, -3.173353759392056, -0.07248830518368095]
# b = [-0.010125138023269723, 2.6846077928845657, 5.0058705072966685, 6.68695359196032, 7.594440965780763, 7.799655109984676, 7.488656092665701, 6.859162498618964, 6.07696209019564, 5.2539033296237685, 4.47198622952278, 3.7625178377266377, 3.1442567255387233, 2.628748559691866, 2.202410946543257, 1.8478066251477356, 1.555675261797212, 1.3266565369914094, 1.1331455204459784, 0.9591052801046692, 0.8084649397860108, 0.6718890430850375, 0.5398931977293648, 0.4227743200389104, 0.3365317313816919, 0.2647946409449869, 0.20209141172820855, 0.1500693602867647, 0.1022353336103951, 0.05215894270455172, 0.0060258788012403555, -0.029081869101010165, -0.07755867562622665, -0.14583248076839592, -0.2201445349940495, -0.2990530968757405, -0.3951708774552218, -0.5070197838664252, -0.6192645123114489, -0.7401203674359328, -0.8674152954289032, -0.9977843443299149, -1.1373059613703747, -1.309688950650072, -1.5378733900523134, -1.824615239900184, -2.189518196993034, -2.6345291193329334, -3.1514154657072893, -3.74047112862811, -4.425291440461588, -5.21502030290108, -6.062410175998749, -6.8987696434033206, -7.597503455466568, -7.956221444170479, -7.749410199764732, -6.817153230495992, -5.102225515604676, -2.7234004161587317, 0.02790554347331997]
#
# plt.plot(a)
# plt.plot(b)
# plt.show()

import matplotlib.pyplot as plt
import numpy as np

a = [-0.09804649946772491, 3.032740835462734, 5.815522215716384, 8.010554048828276,
     9.432763745912668, 10.066491096702611, 10.0059443423158, 9.417213575477067,
     8.559536825246088, 7.5940339771797, 6.640479979710132, 5.766860685982588,
     4.988201884226176, 4.299725199438104, 3.6805900799798605, 3.127347140439207,
     2.642102410226273, 2.221362994722697, 1.8791796326681964, 1.617868885485524,
     1.4107052628376764, 1.2190655061031257, 1.0344852271590517, 0.850067068542694,
     0.6712593471800472, 0.5088989100246276, 0.37023074610963025, 0.2625600640476115,
     0.18261839102282457, 0.11765967089379176, 0.04234735635075864, -0.053670906078515,
     -0.1643922146033102, -0.29901068641540013, -0.4369697024777728, -0.5485600152887308,
     -0.6427241289086876, -0.7520194310682572, -0.8981155523357284, -1.0887578288572686,
     -1.3351961203134823, -1.6289243043322628, -1.943644841791772, -2.276378088979549,
     -2.6523420042021555, -3.0910698026399284, -3.6144626104511453, -4.238694806383428,
     -4.9640206397153035, -5.79016360057132, -6.709586814254465, -7.679554878798828,
     -8.635415783415457, -9.500976191521612, -10.081623274801528, -10.164636750536408,
     -9.574312164871944, -8.157640430251716, -5.967090785813248, -3.173353759392056,
     -0.07248830518368095]

b = [-0.010125138023269723, 2.6846077928845657, 5.0058705072966685, 6.68695359196032,
     7.594440965780763, 7.799655109984676, 7.488656092665701, 6.859162498618964,
     6.07696209019564, 5.2539033296237685, 4.47198622952278, 3.7625178377266377,
     3.1442567255387233, 2.628748559691866, 2.202410946543257, 1.8478066251477356,
     1.555675261797212, 1.3266565369914094, 1.1331455204459784, 0.9591052801046692,
     0.8084649397860108, 0.6718890430850375, 0.5398931977293648, 0.4227743200389104,
     0.3365317313816919, 0.2647946409449869, 0.20209141172820855, 0.1500693602867647,
     0.1022353336103951, 0.05215894270455172, 0.0060258788012403555, -0.029081869101010165,
     -0.07755867562622665, -0.14583248076839592, -0.2201445349940495, -0.2990530968757405,
     -0.3951708774552218, -0.5070197838664252, -0.6192645123114489, -0.7401203674359328,
     -0.8674152954289032, -0.9977843443299149, -1.1373059613703747, -1.309688950650072,
     -1.5378733900523134, -1.824615239900184, -2.189518196993034, -2.6345291193329334,
     -3.1514154657072893, -3.74047112862811, -4.425291440461588, -5.21502030290108,
     -6.062410175998749, -6.8987696434033206, -7.597503455466568, -7.956221444170479,
     -7.749410199764732, -6.817153230495992, -5.102225515604676, -2.7234004161587317,
     0.02790554347331997]

colors = ["#B90276", "#50237F", "#00A8B0", "#006249", "#525F6B",
          "#FF5733", "#2E86C1", "#28B463", "#F1C40F", "#8E44AD"]

plt.figure(figsize=(8, 6))
plt.plot(a, color=colors[0], linewidth=2, label="case A")
plt.plot(b, color=colors[1], linewidth=2, label="case B")

plt.xlabel("Rotor position [deg]", fontsize=18)
plt.ylabel("Cogging torque [mNm]", fontsize=18)

plt.legend(fontsize=18)
plt.grid(True, linestyle="--", alpha=0.6)

plt.xticks(np.linspace(0, 60, 7), np.linspace(0, 15, 7), fontsize=18)
plt.yticks(fontsize=18)

plt.tight_layout()
plt.savefig('cogging_comp.png', dpi=300)
plt.show()